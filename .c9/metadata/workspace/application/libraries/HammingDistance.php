{"filter":false,"title":"HammingDistance.php","tooltip":"/application/libraries/HammingDistance.php","undoManager":{"mark":14,"position":14,"stack":[[{"start":{"row":0,"column":0},"end":{"row":124,"column":2},"action":"insert","lines":["<?php","class compareImages","{","\tprivate function mimeType($i)","\t{","\t\t/*returns array with mime type and if its jpg or png. Returns false if it isn't jpg or png*/","\t\t$mime = getimagesize($i);","\t\t$return = array($mime[0],$mime[1]);","      ","\t\tswitch ($mime['mime'])","\t\t{","\t\t\tcase 'image/jpeg':","\t\t\t\t$return[] = 'jpg';","\t\t\t\treturn $return;","\t\t\tcase 'image/png':","\t\t\t\t$return[] = 'png';","\t\t\t\treturn $return;","\t\t\tdefault:","\t\t\t\treturn false;","\t\t}","    }  ","    ","\tprivate function createImage($i)","\t{","\t\t/*retuns image resource or false if its not jpg or png*/","\t\t$mime = $this->mimeType($i);","      ","\t\tif($mime[2] == 'jpg')","\t\t{","\t\t\treturn imagecreatefromjpeg ($i);","\t\t} ","\t\telse if ($mime[2] == 'png') ","\t\t{","\t\t\treturn imagecreatefrompng ($i);","\t\t} ","\t\telse ","\t\t{","\t\t\treturn false; ","\t\t} ","    }","    ","\tprivate function resizeImage($i,$source)","\t{","\t\t/*resizes the image to a 8x8 squere and returns as image resource*/","\t\t$mime = $this->mimeType($source);","      ","\t\t$t = imagecreatetruecolor(8, 8);","\t\t","\t\t$source = $this->createImage($source);","\t\t","\t\timagecopyresized($t, $source, 0, 0, 0, 0, 8, 8, $mime[0], $mime[1]);","\t\t","\t\treturn $t;","\t}","    ","    private function colorMeanValue($i)","\t{","\t\t/*returns the mean value of the colors and the list of all pixel's colors*/","\t\t$colorList = array();","\t\t$colorSum = 0;","\t\tfor($a = 0;$a<8;$a++)","\t\t{","\t\t","\t\t\tfor($b = 0;$b<8;$b++)","\t\t\t{","\t\t\t","\t\t\t\t$rgb = imagecolorat($i, $a, $b);","\t\t\t\t$colorList[] = $rgb & 0xFF;","\t\t\t\t$colorSum += $rgb & 0xFF;","\t\t\t\t","\t\t\t}","\t\t\t","\t\t}","\t\t","\t\treturn array($colorSum/64,$colorList);","\t}","    ","    private function bits($colorMean)","\t{","\t\t/*returns an array with 1 and zeros. If a color is bigger than the mean value of colors it is 1*/","\t\t$bits = array();","\t\t ","\t\tforeach($colorMean[1] as $color){$bits[]= ($color>=$colorMean[0])?1:0;}","","\t\treturn $bits;","","\t}","\t","    public function compare($a,$b)","\t{","\t\t/*main function. returns the hamming distance of two images' bit value*/","\t\t$i1 = $this->createImage($a);","\t\t$i2 = $this->createImage($b);","\t\t","\t\tif(!$i1 || !$i2){return false;}","\t\t","\t\t$i1 = $this->resizeImage($i1,$a);","\t\t$i2 = $this->resizeImage($i2,$b);","\t\t","\t\timagefilter($i1, IMG_FILTER_GRAYSCALE);","\t\timagefilter($i2, IMG_FILTER_GRAYSCALE);","\t\t","\t\t$colorMean1 = $this->colorMeanValue($i1);","\t\t$colorMean2 = $this->colorMeanValue($i2);","\t\t","\t\t$bits1 = $this->bits($colorMean1);","\t\t$bits2 = $this->bits($colorMean2);","\t\t","\t\t$hammingDistance = 0;","\t\t","\t\tfor($a = 0;$a<64;$a++)","\t\t{","\t\t","\t\t\tif($bits1[$a] != $bits2[$a])","\t\t\t{","\t\t\t\t$hammingDistance++;","\t\t\t}","\t\t\t","\t\t}","\t\t  ","\t\treturn $hammingDistance;","\t}","}","  ","?>"],"id":1}],[{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"remove","lines":["e"],"id":2}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"remove","lines":["r"],"id":3}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":["a"],"id":4}],[{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"remove","lines":["p"],"id":5}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"remove","lines":["m"],"id":6}],[{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"remove","lines":["o"],"id":7}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"remove","lines":["c"],"id":8}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["S"],"id":9}],[{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["i"],"id":10}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["m"],"id":11}],[{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["i"],"id":12}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["l"],"id":13}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["a"],"id":14}],[{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["r"],"id":15}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":1},"end":{"row":2,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1509043405037,"hash":"6684a34fa1e286583d2e4e9ba60b186438f1fa3b"}